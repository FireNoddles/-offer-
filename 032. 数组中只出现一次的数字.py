#一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。


#链接：https://www.nowcoder.com/questionTerminal/e02fdb54d7524710a7d664d082bb7811?answerType=1&f=discussion
# 来源：牛客网
#
# 思路一：
# 遍历数组，对每个元素直接利用python数组的count函数，因为count()也是，等价于遍历数组再计数，所以时间复杂度为，
# 思路二：
# 利用字典保存元素出现次数，最后选出字典中value为1的key返回。时间复杂度为
# 思路二的优化：
# 由于一个整型数组里除了两个数字之外，其他的数字都出现了两次。当字典中有某个key时，删除这个key，否则这个key的value为1插入字典，时间复杂度为
#
# 思路三：
# 看题解都是用位运算来做的，我觉得这个方法效率比优化后的思路二低一些，时间复杂度介于到之间
# 位运算，异或思路，反正我是想不到...看了题解和评论才弄懂是怎么一回事。
# 按位与&，0&1=0 0&0=0 1&0=0 1&1=1
# 异或^，对位相加，但不进位 1^0=1 1^1=0 0^0=0 0^1=1
#
# 一个数与自己异或为0，一个数与0异或为自己
#
# 由于其它数字两两相同，所以所有数相互异或则得到这两个不同数的异或结果。
# 异或的结果有一位为1，这两个不相同的数在该位一个为0，一个为1。按照这个将数组分为两组，一组在该位为1，一组在该位为0，这两个不同数字分别在这两组内。
# 将两组内的数凉凉异或，因为相同的数会抵消掉，得到的结果就是这两个不同的数。
# -*- coding:utf-8 -*-
class Solution:
    # 返回[a,b] 其中ab是出现一次的两个数字
    def FindNumsAppearOnce(self, array):
        temp = 0
        for _ in array:
            temp = temp ^ _
        i = 1
        print(temp)
        while (temp & 1) != 1:
            temp = temp >> 1
            i+=1
        print(i)
        temp1 = 0
        temp2 = 0
        for _ in array:
            #这里的条件必须为==0 如果==1则不对 因为与后是10进制 有可能不是1
            if (_ & i) == 0:
                temp1 = temp1 ^ _
            else:
                temp2 = temp2 ^ _
        return [temp1,temp2]

